{"version":3,"sources":["components/InputGroup.js","App.js","registerServiceWorker.js","index.js"],"names":["InputGroup","props","useState","isFocused","setIsFocused","showHints","hint","autoFocus","name","placeholder","isValid","value","onKeyPress","onChange","FormGroup","FormText","FormControl","isInvalid","onFocus","onBlur","App","Number","localStorage","getItem","index","setIndex","infinitive","pastSimple","pastParticiple","values","setValues","setShowHints","event","target","charCode","onNextClick","row","data","toLowerCase","nextBtnDisabled","length","nextIndex","setItem","toString","Container","Row","className","Col","xs","sm","md","lg","xl","ru","Button","onClick","disabled","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.f039daf2.chunk.js","sourcesContent":["import React, {useState} from 'react';\nimport {FormGroup, FormControl, FormText} from 'react-bootstrap';\n\nfunction InputGroup(props) {\n  const [isFocused, setIsFocused] = useState(false);\n  const {showHints, hint, autoFocus, name, placeholder, isValid, value, onKeyPress, onChange} = props;\n\n  return (\n    <FormGroup>\n      {showHints ? <FormText>Hint: {hint}</FormText> : null}\n      <FormControl\n        autoFocus={autoFocus}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        isValid={isValid}\n        isInvalid={value && !isFocused && !isValid}\n        onFocus={() => {setIsFocused(true)}}\n        onBlur={() => {setIsFocused(false)}}\n        onKeyPress={onKeyPress}\n        onChange={onChange}\n      />\n    </FormGroup>\n  )\n}\n\nexport default InputGroup;\n","import React, { useState } from 'react';\nimport {Container, Row, Col, Button} from 'react-bootstrap';\nimport InputGroup from './components/InputGroup';\nimport {data} from './data.json';\nimport './App.css';\n\nfunction App() {\n  const [index, setIndex] = useState(Number(localStorage.getItem('index')) || 0);\n  const [values, setValues] = useState({\n    infinitive: \"\",\n    pastSimple: \"\",\n    pastParticiple: \"\"\n  });\n  const [showHints, setShowHints] = useState(false);\n\n  const onChange = event => {\n    setValues({\n      ...values,\n      [event.target.name]: event.target.value\n    });\n  };\n\n  const onKeyPress = target => {\n    if (target.charCode === 13){\n      onNextClick();\n    }\n  };\n\n  const isValid = (name) => {\n    const row = data[index];\n    const value = values[name].toLowerCase();\n    const rowValue = row[name].toLowerCase();\n    return value === rowValue;\n  };\n\n  const onHelpClick = () => {\n    setShowHints(!showHints);\n  };\n\n  const nextBtnDisabled = () => {\n    const row = data[index];\n    return (data.length === index + 1) ||\n      row.infinitive.toLowerCase() !== values.infinitive.toLowerCase() ||\n      row.pastSimple.toLowerCase() !== values.pastSimple.toLowerCase() ||\n      row.pastParticiple.toLowerCase() !== values.pastParticiple.toLowerCase();\n  };\n\n  const onNextClick = () => {\n    if (!nextBtnDisabled()) {\n      const nextIndex = index + 1;\n      setIndex(nextIndex);\n      setValues({\n        infinitive: \"\",\n        pastSimple: \"\",\n        pastParticiple: \"\"\n      });\n      setShowHints(false);\n      localStorage.setItem('index', nextIndex.toString());\n    }\n  };\n\n  const row = data[index];\n\n  return (\n    <Container>\n      <Row className=\"justify-content-sm-center\">\n        <Col xs={12} sm={9} md={7} lg={5} xl={4}>\n          <form>\n            <h3>{row.ru}</h3>\n            <InputGroup\n              autoFocus\n              name=\"infinitive\"\n              placeholder=\"Infinitive\"\n              showHints={showHints}\n              value={values.infinitive}\n              hint={row.infinitive}\n              isValid={isValid('infinitive')}\n              onKeyPress={onKeyPress}\n              onChange={onChange}\n            />\n            <InputGroup\n              name=\"pastSimple\"\n              placeholder=\"Past Simple\"\n              showHints={showHints}\n              value={values.pastSimple}\n              hint={row.pastSimple}\n              isValid={isValid('pastSimple')}\n              onKeyPress={onKeyPress}\n              onChange={onChange}\n            />\n            <InputGroup\n              name=\"pastParticiple\"\n              placeholder=\"Past Participle\"\n              showHints={showHints}\n              value={values.pastParticiple}\n              hint={row.pastParticiple}\n              isValid={isValid('pastParticiple')}\n              onKeyPress={onKeyPress}\n              onChange={onChange}\n            />\n            <div className=\"buttons\">\n              <Button className=\"pull-left\" onClick={onHelpClick}>\n                {!showHints ? 'Show hints' : 'Hide hints'}\n              </Button>\n              <span>{index + 1} of {data.length}</span>\n              <Button className=\"btn-success pull-right\" disabled={nextBtnDisabled()} onClick={onNextClick}>\n                Next\n              </Button>\n            </div>\n          </form>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}